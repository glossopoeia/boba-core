import { * } "core-kinds" as kinds
import { * } "core-numbers" as nums

data List : Value --> Data
data Tuple : [Value] --> Data
data Record : {Field} --> Data
data Variant : {Field} --> Data

about :
/// `clear` removes all elements from the value stack.
native clear
    : z... ===[ e... ][ p... ][ True ]==>
    =
    # fiber.Clear()

about :
/// `gather` grabs all elements from the value stack, and places them in a tuple.
/// The tuple is then the only element on the value stack.
native gather
    : z... ===[ e... ][ p... ][ True ]==> [| z... |]^s
    =
    # fiber.Gather()

about :
/// `spread` takes a tuple, which must be the *only* element on the value stack,
/// and places the elements of that tuple on the value stack.
native spread
    : [| z^s... |]^((s...) || r) ===[ e... ][ p... ][ True ]==> z^s...
    =
    # fiber.Spread()

native nil-tuple
    : z... ===[ e... ][ p... ][ True ]==> z... [| |]^s
    =
    # arr := make([]runtime.Value, 0)
	# fiber.PushValue(arr)

native cons-tuple
    : z... [| y^r... |]^s x ===[ e... ][ p... ][ True ]==> z... [| y^r... x |]^s
    =
    # val := fiber.PopOneValue()
	# arr := fiber.PopOneValue().([]runtime.Value)
	# newArr := make([]runtime.Value, len(arr)+1)
	# copy(newArr, arr)
	# newArr[len(arr)] = val
	# fiber.PushValue(newArr)

native break-tuple
    : z... [| y^s... x^r |]^((s...) || r || q) ===[ e... ][ p... ][ True ]==> z... [| y^s... |]^(s...) x^r
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(arr[:len(arr)-1])
	# fiber.PushValue(arr[len(arr)-1])

native head-tuple
    : z... [| y^s... x^r |]^((s...) || r) ===[ e... ][ p... ][ True ]==> z... x^r
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(arr[len(arr)-1])

native tail-tuple
    : z... [| y^s... x^r |]^((s...) || r) ===[ e... ][ p... ][ True ]==> z... [| y^s... |]^q
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(arr[:len(arr)-1])

native length-tuple
    : z... [| y^r... |]^s ===[ e... ][ p... ][ True ]==> z... (INative one)^r
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(int(len(arr)))



native nil-list
    : z... ===[ e... ][ p... ][ True ]==> z... [y]^s
    =
    # arr := make([]runtime.Value, 0)
	# fiber.PushValue(arr)

native cons-list
    : z... [y]^s y ===[ e... ][ p... ][ True ]==> z... [y]^r
    =
    # val := fiber.PopOneValue()
	# arr := fiber.PopOneValue().([]runtime.Value)
	# newArr := make([]runtime.Value, len(arr)+1)
	# copy(newArr, arr)
	# newArr[len(arr)] = val
	# fiber.PushValue(newArr)

native snoc-list
    : z... [y]^s y ===[ e... ][ p... ][ True ]==> z... [y]^r
    =
    # val := fiber.PopOneValue()
	# arr := fiber.PopOneValue().([]runtime.Value)
	# newArr := make([]runtime.Value, len(arr)+1)
	# copy(newArr[1:], arr)
	# newArr[0] = val
	# fiber.PushValue(newArr)

native append-list
    : z... [y]^s [y]^r ===[ e... ][ p... ][ True ]==> z... [y]^q
    =
    # lstR := fiber.PopOneValue().([]runtime.Value)
    # lstL := fiber.PopOneValue().([]runtime.Value)
    # newArr := make([]runtime.Value, len(lstR)+len(lstL))
    # copy(newArr, lstL)
    # copy(newArr[len(lstL):], lstR)
    # fiber.PushValue(newArr)

native break-list
    : z... [y^r]^(s || r) ===[ e... ][ p... ][ True ]==> z... [y^r]^q y^r 
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(arr[:len(arr)-1])
	# fiber.PushValue(arr[len(arr)-1])

native head-list
    : z... [y^r]^(s || r) ===[ e... ][ p... ][ True ]==> z... y^r
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(arr[len(arr)-1])

native tail-list
    : z... [y]^r ===[ e... ][ p... ][ True ]==> z... [y]^q
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(arr[:len(arr)-1])

native length-list
    : z... [y]^s ===[ e... ][ p... ][ True ]==> z... (INative one)^r
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(int(len(arr)))

func is-empty-list = length-list 0 eq-inative

export { * }